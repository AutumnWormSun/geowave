{"paragraphs":[{"title":"Configure GeoWave Session","text":"%sh\ncd /home/hadoop\nsource geowave-env.sh\n\ngeowave config geoserver \"$HOSTNAME:8000\"\n\ngeowave config rmstore gdelt\ngeowave config addstore gdelt --gwNamespace geowave.gdelt -t hbase --zookeeper $HOSTNAME:2181\n\ngeowave config rmindex gdelt-spatial\ngeowave config addindex -t spatial gdelt-spatial --partitionStrategy round_robin --numPartitions $NUM_PARTITIONS\n\ngeowave config rmstore kmeans\ngeowave config addstore kmeans --gwNamespace geowave.kmeans -t hbase --zookeeper $HOSTNAME:2181\n\ngeowave config list","user":"anonymous","dateUpdated":"2017-08-10T16:33:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh","editorHide":false,"title":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502302675004_1337904437","id":"20170809-181755_1512238840","dateCreated":"2017-08-09T18:17:55+0000","dateStarted":"2017-08-10T16:26:50+0000","dateFinished":"2017-08-10T16:26:55+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15300"},{"title":"Verify GDELT Ingest","text":"%sh\ncd /home/hadoop\nsource geowave-env.sh\ngeowave analytic sql \"select count(*) from gdelt\"","user":"anonymous","dateUpdated":"2017-08-10T16:27:16+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh","editorHide":false,"title":true,"tableHide":false},"settings":{"params":{"EAST":"","NORTH":"","SOUTH":"","WEST":""},"forms":{}},"apps":[],"jobName":"paragraph_1502307230387_-969370728","id":"20170809-193350_312794083","dateCreated":"2017-08-09T19:33:50+0000","dateStarted":"2017-08-10T16:27:15+0000","dateFinished":"2017-08-10T16:27:31+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15301"},{"title":"Run KMeans with Hulls","text":"%sh\n# clear out old runs\ngeowave remote clear kmeans\n\n# run kmeans\ngeowave analytic kmeansspark gdelt kmeans -k 12 --hulls\n\n# check the output\ngeowave analytic sql \"select * from kmeans|kmeans-hulls\" --show 12","user":"anonymous","dateUpdated":"2017-08-10T16:48:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh","editorHide":false,"title":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502307632884_1439929052","id":"20170809-194032_1817638679","dateCreated":"2017-08-09T19:40:32+0000","dateStarted":"2017-08-10T16:48:44+0000","dateFinished":"2017-08-10T16:49:31+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15302"},{"title":"Export KMeans Centroids to CSV","text":"%sh\n# Set up the temp folder\ncd /mnt/tmp\nrm -rf kmeans\nmkdir kmeans\n\n# Query kmeans centroids and write to local temp file\ngeowave analytic sql \"select * from kmeans|kmeans-centroids\" --csv /mnt/tmp/kmeans\n\n# Move the csv output to hdfs\nmv kmeans/part*.csv kmeans-centroids.csv\nhdfs dfs -rm /user/zeppelin/kmeans-centroids.csv\nhdfs dfs -put kmeans-centroids.csv /user/zeppelin/kmeans-centroids.csv","user":"anonymous","dateUpdated":"2017-08-10T16:49:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh","editorHide":false,"title":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502309883255_1653049818","id":"20170809-201803_119430460","dateCreated":"2017-08-09T20:18:03+0000","dateStarted":"2017-08-10T16:49:51+0000","dateFinished":"2017-08-10T16:50:05+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15303"},{"title":"Load KMeans Centroid CSV into DataFrame","text":"// load centroid data\nval kmeansText = sc.textFile(\"/user/zeppelin/kmeans-centroids.csv\")\n\ncase class KMeansRow(lat: Double, lon: Double, data : String)\n\ndef parseLat (wkt: String) : Double = {\n   val latStart = wkt.lastIndexOf(\" \") + 1\n   val latStop = wkt.lastIndexOf(\")\")\n   val latStr = wkt.substring(latStart, latStop)\n   return latStr.toDouble\n}\n\ndef parseLon (wkt: String) : Double = {\n   val lonStart = wkt.indexOf(\"(\") + 1\n   val lonStop = wkt.indexOf(\" \", lonStart)\n   val lonStr = wkt.substring(lonStart, lonStop)\n   return lonStr.toDouble\n}\n\n// split each line, filter out header (starts with \"geom\"), and map it into data class\nval kmeansData = kmeansText.map(s=>s.split(\",\")).filter(s=>s(0)!=\"geom\").map(\n    s=>KMeansRow(parseLat(s(0)), parseLon(s(0)), s(1))\n)\n\nz.angularBind(\"pins\", kmeansData.collect())\n\nkmeansData.toDF().registerTempTable(\"kmeans\")\n","user":"anonymous","dateUpdated":"2017-08-10T16:50:19+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","editorHide":false,"title":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502242015872_-503116293","id":"20170809-012655_830012640","dateCreated":"2017-08-09T01:26:55+0000","dateStarted":"2017-08-10T16:50:19+0000","dateFinished":"2017-08-10T16:50:27+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15304"},{"title":"KMeans Centroids Table","text":"%sql\nselect lat as Latitude, lon as Longitude from kmeans","user":"anonymous","dateUpdated":"2017-08-10T16:50:32+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502310789645_524512896","id":"20170809-203309_1972137502","dateCreated":"2017-08-09T20:33:09+0000","dateStarted":"2017-08-10T16:50:32+0000","dateFinished":"2017-08-10T16:50:33+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15305"},{"text":"%angular\r\n\r\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\r\n<h3>GeoWave Leaflet Map</h3>\r\n<div id=\"map\" style=\"height: 600px; width: 100%\"></div>\r\n\r\n<script type=\"text/javascript\">\r\nfunction initMap() {\r\n    var map = L.map('map').setView([55.00, 5.00], 5);\r\n\r\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\r\n        maxZoom: 15,\r\n        minZoom: 2\r\n    }).addTo(map);\r\n\r\n    var geoMarkers = L.layerGroup().addTo(map);\r\n    var markerIcon = L.icon({\r\n        iconUrl: 'https://openstationmap.org/0.2.0/client/leaflet/images/marker-icon.png',\r\n        iconSize: [24, 32],\r\n    });\r\n\r\n    var el = angular.element($('#map').parent('.ng-scope'));\r\n    angular.element(el).ready(function() {\r\n        window.pinWatcher = el.scope().compiledScope.$watch('pins', function(pinList, oldValue) {\r\n            geoMarkers.clearLayers();\r\n            angular.forEach(pinList, function(pin) {\r\n                var marker = L.marker([ pin.lat, pin.lon ], {icon: markerIcon})\r\n                  .bindPopup(pin.data)\r\n                  .addTo(geoMarkers);\r\n            });\r\n        })\r\n    });}\r\n\r\nif (window.pinWatcher) {\r\n    // clear existing watcher otherwise we'll have duplicates\r\n    window.pinWatcher();\r\n}\r\n\r\n// ensure we only load the script once, seems to cause issues otherwise\r\nif (window.L) {\r\n    initMap();\r\n} else {\r\n    console.log('Loading Leaflet library');\r\n    var sc = document.createElement('script');\r\n    sc.type = 'text/javascript';\r\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\r\n    sc.onload = initMap;\r\n    sc.onerror = function(err) { alert(err); }\r\n    document.getElementsByTagName('head')[0].appendChild(sc);\r\n}\r\n</script>","user":"anonymous","dateUpdated":"2017-08-10T16:38:31+0000","config":{"colWidth":8,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":true},"editorMode":"ace/mode/undefined","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502244934328_-224218265","id":"20170809-021534_2122057818","dateCreated":"2017-08-09T02:15:34+0000","dateStarted":"2017-08-10T16:38:31+0000","dateFinished":"2017-08-10T16:38:31+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15306"},{"text":"%sql\n","user":"anonymous","dateUpdated":"2017-08-09T22:29:29+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql","editorHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1502297485890_-1499774340","id":"20170809-165125_1681686532","dateCreated":"2017-08-09T16:51:25+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15307"}],"name":"GeoWave KMeans","id":"2CRQXTHGJ","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[{"name":"clearMarkers","object":false,"noteId":"2CRQXTHGJ"},{"name":"name","object":"Dirk","noteId":"2CRQXTHGJ"},{"name":"newpin","object":{"user":"Dirk","msg":"Lives Here!","loc":{"lat":36.992,"lon":-121.92}},"noteId":"2CRQXTHGJ"},{"name":"pinList","object":{"head":{"msg":"Kilroy Was Here!","loc":{"lat":36.992,"lon":-121.92}},"tl":{}},"noteId":"2CRQXTHGJ"},{"name":"pins","object":[{"lat":56.00164078515345,"lon":9.977822228408277,"data":"KMeansCentroid"},{"lat":52.478324195193,"lon":5.778140566642383,"data":"KMeansCentroid"},{"lat":50.9418228748068,"lon":7.125258258629572,"data":"KMeansCentroid"},{"lat":51.01480434903745,"lon":9.0028583804458,"data":"KMeansCentroid"},{"lat":53.39208661825724,"lon":9.757198502766256,"data":"KMeansCentroid"},{"lat":51.561803773584884,"lon":0.6299734318774114,"data":"KMeansCentroid"},{"lat":52.246695672526975,"lon":0.1831255326120875,"data":"KMeansCentroid"},{"lat":50.86800967523682,"lon":2.4533613937753733,"data":"KMeansCentroid"},{"lat":50.83347436377008,"lon":4.297037287162273,"data":"KMeansCentroid"},{"lat":52.279301324965296,"lon":4.874378634937227,"data":"KMeansCentroid"},{"lat":55.333300000000015,"lon":3,"data":"KMeansCentroid"},{"lat":59.115727525252545,"lon":7.268808358585861,"data":"KMeansCentroid"}],"noteId":"2CRQXTHGJ"}],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}